import com.openai.client.OpenAIClientAsync;
import com.openai.client.okhttp.OpenAIOkHttpClientAsync;
import com.openai.models.ChatModel;
import com.openai.models.chat.completions.ChatCompletionCreateParams;

<% if (useTokenCredentials) { %>import com.azure.identity.AuthenticationUtil;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.openai.credential.BearerTokenCredential; <% 
} else { %>import com.openai.azure.credential.AzureApiKeyCredential; 
<% } %>


public class Main {
    public static void main(String[] args) {

    <%= java.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint)%>
    <%if (!useTokenCredentials) { %>
    <%= java.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey)%>
    <%}%>
    <%= java.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName)%>         

        OpenAIOkHttpClientAsync.Builder clientBuilder = OpenAIOkHttpClientAsync.builder();
        <% if (!useTokenCredentials) { %>
        clientBuilder
                .baseUrl(endpoint)
                .credential(AzureApiKeyCredential.create(apiKey));        
        <% 
        } else { %>
        clientBuilder
                .baseUrl(endpoint)
                .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(
                        new DefaultAzureCredentialBuilder().build(), "https://cognitiveservices.azure.com/.default")));
        <%} %>
        OpenAIClientAsync client = clientBuilder.build();

        ChatCompletionCreateParams createParams = ChatCompletionCreateParams.builder()
                .model(ChatModel.of(deploymentName))
                .addSystemMessage("You are a helpful assistant. You will talk like a pirate.")
                .addUserMessage("Can you help me?")
                .addUserMessage("What's the best way to train a parrot?")
                .build();

        client.chat()
                .completions()
                .create(createParams)
                .thenAccept(completion -> completion.choices()
                        .forEach(choice -> choice.message().content().ifPresent(System.out::println)))
                .join();
    }
}