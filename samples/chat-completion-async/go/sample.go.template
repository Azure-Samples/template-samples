package main

<%= go.includes(
	"context",
	"fmt",
	"log",
	"os",
	{ module: "github.com/Azure/azure-sdk-for-go/sdk/azidentity", condition: useTokenCredentials },
	"github.com/openai/openai-go",
	"github.com/openai/openai-go/azure"
) %>

func main() {
	<%= go.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
	<%= go.valueOrEnvironment(useEnvVars, "api_version", "AZURE_OPENAI_API_VERSION", apiVersion) %>
	<%	if (useTokenCredentials) { %>
	<% } else { %>
	<%= go.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
	<% } %>	
	<%=	go.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>

	<% if (useTokenCredentials) { %>
	token_credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		fmt.Println("Error creating credential:", err)
		os.Exit(1)
	}
	client := openai.NewClient(
		azure.WithEndpoint(endpoint, api_version),
		azure.WithTokenCredential(token_credential),
	)
	<% } else { %>
		client := openai.NewClient(
		azure.WithEndpoint(endpoint, api_version),
		azure.WithAPIKey(apiKey),
		)
	<% } %>

	// Create a channel to receive the result
	done := make(chan *openai.ChatCompletion)
	errChan := make(chan error)

	// Launch goroutine with anonymous function
	go func() {
		defer close(done)
		defer close(errChan)

		resp, err := client.Chat.Completions.New(context.TODO(), openai.ChatCompletionNewParams{
			Model: openai.ChatModel(deploymentName),
			Messages: []openai.ChatCompletionMessageParamUnion{
				{
					OfSystem: &openai.ChatCompletionSystemMessageParam{
						Content: openai.ChatCompletionSystemMessageParamContentUnion{
							OfString: openai.String("You are a helpful assistant. You will talk like a pirate."),
						},
					},
				},
				// The user asks a question
				{
					OfUser: &openai.ChatCompletionUserMessageParam{
						Content: openai.ChatCompletionUserMessageParamContentUnion{
							OfString: openai.String("Can you help me?"),
						},
					},
				},
				{
					OfAssistant: &openai.ChatCompletionAssistantMessageParam{
						Content: openai.ChatCompletionAssistantMessageParamContentUnion{
							OfString: openai.String("Arrrr! Of course, me hearty! What can I do for ye?"),
						},
					},
				},
				{
					OfUser: &openai.ChatCompletionUserMessageParam{
						Content: openai.ChatCompletionUserMessageParamContentUnion{
							OfString: openai.String("What's the best way to train a parrot?"),
						},
					},
				},
			},
		})

		if err != nil {
			errChan <- err
			return
		}
		done <- resp
	}()

	select {
	case chatCompletion := <-done:
		for _, choice := range chatCompletion.Choices {
			if choice.Message.Content != "" {
				fmt.Fprintf(os.Stderr, "Content[%d]: %s\n", choice.Index, choice.Message.Content)
			}
		}
	case err := <-errChan:
		log.Fatalf("Error: %v", err)
	}
}
