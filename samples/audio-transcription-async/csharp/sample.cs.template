<%= csharp.usings(
    { namespace: "System.ClientModel", condition: !useTokenCredentials },
    "Azure.AI.OpenAI",
    { namespace: "Azure.Identity", condition: useTokenCredentials },
    "OpenAI.Audio"
) %>

<%= csharp.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>;
<% if (!useTokenCredentials) { %>
<%= csharp.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>;
<% } %>
<%= csharp.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>;

<% if (useTokenCredentials) { %>
AzureOpenAIClient client = new(new(endpoint), new DefaultAzureCredential());
<% } else { %>
AzureOpenAIClient client = new(new Uri(endpoint), new ApiKeyCredential(apiKey));
<% } %>
AudioClient chatClient = client.GetAudioClient(deploymentName);

AudioTranscriptionOptions transcriptionOptions = new AudioTranscriptionOptions
{
   Language = "en", // Specify the language if needed
   ResponseFormat = AudioTranscriptionFormat.Simple, // Specify the response format
   Temperature = 0.1f // Set temperature for transcription
};

string fileName = "batman.wav";
string audioFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "resource", fileName);
var transcriptionResult = await chatClient.TranscribeAudioAsync(audioFilePath, transcriptionOptions);
Console.WriteLine(transcriptionResult.Value.Text.ToString());