<% if (useTokenCredentials) { %>
using Azure.Identity; 
<%} else { %>using Azure; 
<% } %>
using OpenAI;
using OpenAI.Embeddings;
using System.ClientModel;

<%= csharp.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
<%if (useTokenCredentials) { %>
<% } else { %>
<%= csharp.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
<% } %>
<%= csharp.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>

<% if (useTokenCredentials) { %>
BearerTokenPolicy tokenPolicy = new(
    new DefaultAzureCredential(),
    "https://cognitiveservices.azure.com/.default");
OpenAIClient client = new(
    authenticationPolicy: tokenPolicy,
    options: new OpenAIClientOptions()
    {
        Endpoint = new Uri(endpoint),
        TokenProvider = new DefaultAzureCredential(),
    });
<% } else { %> 
OpenAIClient client = new(
    new ApiKeyCredential(apiKey),
    new OpenAIClientOptions()
    {
        Endpoint = new Uri(endpoint),
    });
<% } %>EmbeddingClient embeddingClient = client.GetEmbeddingClient(deploymentName);

ClientResult<OpenAIEmbedding> embeddingResult = embeddingClient.GenerateEmbedding("The quick brown fox jumped over the lazy dog");

if (embeddingResult?.Value != null)
{
    float[] embedding = embeddingResult.Value.ToFloats().ToArray();

    Console.WriteLine($"Embedding Length: {embedding.Length}");
    Console.WriteLine("Embedding Values:");
    foreach (float value in embedding)
    {
        Console.Write($"{value}, ");
    }
}
else
{
    Console.WriteLine("Failed to generate embedding or received null value.");
}
