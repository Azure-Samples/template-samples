import com.openai.azure.AzureOpenAIServiceVersion;
import com.openai.client.OpenAIClientAsync;
import com.openai.client.okhttp.OpenAIOkHttpClientAsync;
import com.openai.models.ChatModel;
import com.openai.models.responses.ResponseCreateParams;
<% if (useTokenCredentials) { %>
import com.azure.identity.AuthenticationUtil;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.openai.credential.BearerTokenCredential; 
<% } else { %>
import com.openai.azure.credential.AzureApiKeyCredential; 
<% } %>

public class Main {
public static void main(String[] args) {
    String endpoint = <%= java.valueOrEnvironment(useEnvVars, "AZURE_OPENAI_ENDPOINT", endpoint)%>;
    <%if (!useTokenCredentials) { %>
    String azureOpenaiKey = <%= java.valueOrEnvironment(useEnvVars, "AZURE_OPENAI_API_KEY", apiKey)%>;
    <%}%>
    String deploymentName = <%= java.valueOrEnvironment(useEnvVars, "AZURE_OPENAI_DEPLOYMENT", deploymentName)%>;        

    OpenAIOkHttpClientAsync.Builder clientBuilder = OpenAIOkHttpClientAsync.builder();
    clientBuilder.azureServiceVersion(AzureOpenAIServiceVersion.latestPreviewVersion());
    <% if (!useTokenCredentials) { %>
    clientBuilder
            .baseUrl(endpoint)
            .credential(AzureApiKeyCredential.create(azureOpenaiKey));        
    <% 
    } else { %>
    clientBuilder
            .baseUrl(endpoint)
            .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(
                    new DefaultAzureCredentialBuilder().build(), "https://cognitiveservices.azure.com/.default")));
    <%} %>
    OpenAIClientAsync client = clientBuilder.build();
	
    ResponseCreateParams createParams = ResponseCreateParams.builder()
	    .input("Tell me a 20-word story about building the best SDK!!")
	    .model(ChatModel.of(deploymentName))
	    .build();

    client.responses()
	    .createStreaming(createParams)
	    .subscribe(event -> event.outputTextDelta().ifPresent(
                    textEvent -> System.out.print(textEvent.delta())))
	    .onCompleteFuture()
	    .join();
    }
}
