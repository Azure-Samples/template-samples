import com.openai.client.OpenAIClient;
import com.openai.client.okhttp.OpenAIOkHttpClient;
import com.openai.models.responses.Response;
import com.openai.models.responses.ResponseCreateParams;

<% if (useTokenCredentials) { %>import com.azure.identity.AuthenticationUtil;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.openai.credential.BearerTokenCredential; <% 
} else { %>import com.openai.azure.credential.AzureApiKeyCredential; 
<% } %>

public class Sample {
    public static void main(String[] args) {
        String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");
        <%if (!useTokenCredentials) { %>
        String azureOpenaiKey = System.getenv("AZURE_OPENAI_API_KEY");
        <%}%>
        String deploymentName = System.getenv("AZURE_OPENAI_DEPLOYMENT");        

        OpenAIOkHttpClient.Builder clientBuilder = OpenAIOkHttpClient.builder();
        <% if (!useTokenCredentials) { %>
        clientBuilder
                .baseUrl(endpoint)
                .credential(AzureApiKeyCredential.create(azureOpenaiKey));        
        <% 
        } else { %>
        clientBuilder
                .baseUrl(endpoint)
                .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(
                        new DefaultAzureCredentialBuilder().build(), "https://cognitiveservices.azure.com/.default")));
        <%} %>
        OpenAIClient client = clientBuilder.build();

        ResponseCreateParams createParams = ResponseCreateParams.builder()
            .input("What is tango? Answer in 30 words or less")
            .model(deploymentName)
            .build();

        Response response = client.responses().create(createParams);

        response.output().forEach(item ->
            item.message().ifPresent(message ->
                message.content().forEach(content ->
                    content.outputText().ifPresent(
                        outputText -> System.out.println(outputText.text())))));
    }
}