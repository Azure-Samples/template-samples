<%= csharp.usings(
    { namespace: "System.ClientModel", condition: !useTokenCredentials },
    "System.ClientModel.Primitives",
    { namespace: "Azure.Identity", condition: useTokenCredentials },
    "Azure.AI.OpenAI",
    "OpenAI.Responses",
) %>

<%= csharp.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
<% if (!useTokenCredentials) { %>
<%= csharp.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
<% } %>
<%= csharp.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>

<% if (useTokenCredentials) { %>
AzureOpenAIClient azureClient = new(new(endpoint), new DefaultAzureCredential());
<% } else { %>
AzureOpenAIClient azureClient = new(new Uri(endpoint), new ApiKeyCredential(apiKey));
<% } %>
OpenAIResponseClient client = azureClient.GetOpenAIResponseClient(deploymentName);
ResponseCreationOptions options = new();
ResponseContentPart contentPart = ResponseContentPart.CreateInputTextPart("Tell me a 20-word story about building the best SDK!");
ResponseItem inputItem = ResponseItem.CreateUserMessageItem([contentPart]);

foreach (StreamingResponseUpdate update
    in client.CreateResponseStreaming([inputItem], options))
{
    Console.WriteLine(ModelReaderWriter.Write(update));
}