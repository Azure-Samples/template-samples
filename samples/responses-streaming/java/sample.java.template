import com.openai.azure.AzureOpenAIServiceVersion;
import com.openai.client.OpenAIClient;
import com.openai.client.okhttp.OpenAIOkHttpClient;
import com.openai.core.http.StreamResponse;
import com.openai.models.ChatModel;
import com.openai.models.responses.ResponseCreateParams;
<% if (useTokenCredentials) { %>
import com.azure.identity.AuthenticationUtil;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.openai.credential.BearerTokenCredential; 
<% } else { %>
import com.openai.azure.credential.AzureApiKeyCredential; 
<% } %>
import com.openai.models.responses.ResponseStreamEvent;

public class Sample {
public static void main(String[] args) {
    <%= java.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint)%>
    <%if (!useTokenCredentials) { %>
    <%= java.valueOrEnvironment(useEnvVars, "azureOpenaiKey", "AZURE_OPENAI_API_KEY", apiKey)%>
    <%}%>
    <%= java.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName)%>

    OpenAIOkHttpClient.Builder clientBuilder = OpenAIOkHttpClient.builder();
    clientBuilder.azureServiceVersion(AzureOpenAIServiceVersion.latestPreviewVersion());
    <% if (!useTokenCredentials) { %>
    clientBuilder
            .baseUrl(endpoint)
            .credential(AzureApiKeyCredential.create(azureOpenaiKey));        
    <% 
    } else { %>
    clientBuilder
            .baseUrl(endpoint)
            .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(
                    new DefaultAzureCredentialBuilder().build(), "https://cognitiveservices.azure.com/.default")));
    <%} %>
    OpenAIClient client = clientBuilder.build();
	
    ResponseCreateParams createParams = ResponseCreateParams.builder()
	    .input("Tell me a 20-word story about building the best SDK!!")
	    .model(ChatModel.of(deploymentName))
	    .build();

    try (StreamResponse<ResponseStreamEvent> streamResponse =
                 client.responses().createStreaming(createParams)) {
        streamResponse.stream()
                .forEach(event -> event.outputTextDelta().ifPresent(
                        textEvent -> System.out.print(textEvent.delta())
                ));
    }
}
}