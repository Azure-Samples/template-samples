<% if (useTokenCredentials) { %>
using Azure.Identity; 
<%} else { %>using Azure; 
<% } %>
using System.ClientModel;
using OpenAI.Chat;

<%= csharp.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
<%if (useTokenCredentials) { %>
<% } else { %>
<%= csharp.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>;
<% } %>
<% if (useTokenCredentials) { %>

BearerTokenPolicy tokenPolicy = new(
    new DefaultAzureCredential(),
    "https://cognitiveservices.azure.com/.default");
OpenAIClient client = new(
    authenticationPolicy: tokenPolicy,
    options: new OpenAIClientOptions()
    {
        Endpoint = new($"{endpoint}/openai/v1/"),
    });
<% } else { %> 
OpenAIClient client = new(
    new ApiKeyCredential(apiKey),
    new OpenAIClientOptions()
    {
        Endpoint = new($"{endpoint}/openai/v1/"),
        TokenProvider = new DefaultAzureCredential(),
    });
<% } %>

ChatCompletion completion = client.CompleteChat(
     [
         new SystemChatMessage("You are a helpful assistant that talks like a pirate."),
         new UserChatMessage("Hi, can you help me?"),
         new AssistantChatMessage("Arrr! Of course, me hearty! What can I do for ye?"),
         new UserChatMessage("What's the best way to train a parrot?"),
     ]);

Console.WriteLine($"Model={completion.Model}");
foreach (var choice in completion.Content)
{
    var message = choice.Text;
    Console.WriteLine($"Chat Role: {completion.Role}");
    Console.WriteLine("Message:");
    Console.WriteLine(message);
} 