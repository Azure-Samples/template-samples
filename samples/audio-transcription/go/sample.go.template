package main

<%= go.includes(
	"context",
	"fmt",
	"log",
	"os",
	{ module: "github.com/Azure/azure-sdk-for-go/sdk/azidentity", condition: useTokenCredentials },
	"github.com/openai/openai-go",
	"github.com/openai/openai-go/azure",
) %>

func main() {
	<%= go.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
	<%= go.valueOrEnvironment(useEnvVars, "api_version", "AZURE_OPENAI_API_VERSION", apiVersion) %>
	<%	if (useTokenCredentials) { %>
	<% } else { %>
	<%= go.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
	<% } %>
	<%=	go.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>

	<% if (useTokenCredentials) { %>
	token_credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		fmt.Println("Error creating credential:", err)
		os.Exit(1)
	}
	client := openai.NewClient(
		azure.WithEndpoint(endpoint, api_version),
		azure.WithTokenCredential(token_credential),
	)
	<% } else { %>
		client := openai.NewClient(
		azure.WithEndpoint(endpoint, api_version),
		azure.WithAPIKey(apiKey),
		)
	<% } %>

	file, err := os.Open("resources/speech.wav")
	if err != nil {
		panic(err)
	}

	resp, err := client.Audio.Transcriptions.New(context.TODO(), openai.AudioTranscriptionNewParams{
		Model:          openai.AudioModel(deploymentName),
		File:           file,
		Prompt:         openai.String("This is a batman audio."), // optional prompt to help the model understand the context of the audio
		ResponseFormat: openai.AudioResponseFormatJSON,           // specify the response format, e.g., "text" for text transcription
		Temperature:    openai.Float(0.2),                        // you can adjust the temperature for more or less randomness
		Language:       openai.String("en"),                      // specify the language of the audio, e.g., "en" for English

	})
	if err != nil {
		panic(err)
	}

	println(resp.Text)

	if err != nil {
		log.Printf("ERROR: %s", err)
		return
	}
}
