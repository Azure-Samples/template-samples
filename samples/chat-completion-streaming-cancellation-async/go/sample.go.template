package main

<%= go.includes(
	"context",
	"fmt",
	"log",
	"os",
	"os/signal",
	"strings",
	{ module: "github.com/Azure/azure-sdk-for-go/sdk/azidentity", condition: useTokenCredentials },
	"github.com/openai/openai-go",
	"github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai",
	"github.com/openai/openai-go/azure",
	"github.com/openai/openai-go/packages/ssestream",
	"github.com/openai/openai-go/shared/constant"
) %>

func main() {
	<%= go.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
	<%= go.valueOrEnvironment(useEnvVars, "api_version", "AZURE_OPENAI_API_VERSION", apiVersion) %>
	<% if (useTokenCredentials) { %>
	<% } else { %>
	<%= go.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
	<% } %>
	<%=	go.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>

		<% if (useTokenCredentials) { %>
	token_credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		fmt.Println("Error creating credential:", err)
		os.Exit(1)
	}
	client := openai.NewClient(
		azure.WithEndpoint(endpoint, api_version),
		azure.WithTokenCredential(token_credential),
	)
	<% } else { %>
		client := openai.NewClient(
		azure.WithEndpoint(endpoint, api_version),
		azure.WithAPIKey(apiKey),
		)
	<% } %>

	// Set up cancellation context
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan)
	go func() {
		<-sigChan
		fmt.Fprintln(os.Stderr, "Cancellation signal received, cancelling request...")
		cancel()
	}()

	done := make(chan *ssestream.Stream[openai.ChatCompletionChunk])
	errChan := make(chan error)

	go func() {
		defer close(done)
		defer close(errChan)

		stream := client.Chat.Completions.NewStreaming(context.Background(), openai.ChatCompletionNewParams{
			Model: openai.ChatModel(deploymentName),
			Messages: []openai.ChatCompletionMessageParamUnion{
				{
					OfSystem: &openai.ChatCompletionSystemMessageParam{
						Content: openai.ChatCompletionSystemMessageParamContentUnion{
							OfString: openai.String("You are a helpful assistant. You will talk like a pirate."),
						},
					},
				},
				{
					OfUser: &openai.ChatCompletionUserMessageParam{
						Content: openai.ChatCompletionUserMessageParamContentUnion{
							OfString: openai.String("Can you help me?"),
						},
					},
				},
				{
					OfAssistant: &openai.ChatCompletionAssistantMessageParam{
						Content: openai.ChatCompletionAssistantMessageParamContentUnion{
							OfString: openai.String("Arrrr! Of course, me hearty! What can I do for ye?"),
						},
					},
				},
				{
					OfUser: &openai.ChatCompletionUserMessageParam{
						Content: openai.ChatCompletionUserMessageParamContentUnion{
							OfString: openai.String("What's the best way to train a parrot?"),
						},
					},
				},
			},
		})

		if err != nil {
			errChan <- err
			return
		}
		done <- stream
	}()

	select {
	case completionChunk := <-done:
		var choices []openai.ChatCompletionChunkChoice
		cancelled := false
		for completionChunk.Next() {
			chunk := completionChunk.Current()
			azureChunk := azopenai.ChatCompletionChunk(chunk)
			_, err := azureChunk.PromptFilterResults()

			if err != nil {
				log.Printf("ERROR: %s", err)
				return
			}

			if len(chunk.Choices) == 0 {
				continue
			}
			choices = append(choices, chunk.Choices[0])
			// Cancel if content is "parrot"
			if strings.Contains(chunk.Choices[0].Delta.Content, "*") {
				fmt.Fprintln(os.Stderr, "Detected '*' in content, cancelling context...")
				cancel()
				cancelled = true
				break
			}
		}

		if cancelled {
			log.Println("Operation cancelled due to '*' content.")
			return
		}

		var message string
		var role constant.Assistant
		for _, choice := range choices {
			message += choice.Delta.Content
			if len(choice.Delta.Role) > 0 {
				role = constant.Assistant(choice.Delta.Role)
			}
		}
		fmt.Fprintf(os.Stderr, "Role:%s \n", role)
		fmt.Fprintf(os.Stderr, "%s\n", message)
	case err := <-errChan:
		log.Fatalf("Error: %v", err)
	case <-ctx.Done():
		log.Println("Operation cancelled.")
	}
}