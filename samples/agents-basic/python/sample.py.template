# ------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------

"""
DESCRIPTION:
    This sample demonstrates how to use basic agent operations from
    the Azure Agents service using a synchronous client.

USAGE:
    python sample.py

    Before running the sample:

    pip install azure-ai-projects azure-ai-agents azure-identity

    Set these environment variables with your own values:
    1) PROJECT_ENDPOINT - The Azure AI Project endpoint, as found in the Overview
                          page of your Azure AI Foundry portal.
    2) MODEL_DEPLOYMENT_NAME - The deployment name of the AI model, as found under the "Name" column in
       the "Models + endpoints" tab in your Azure AI Foundry project.
"""
<% if (useEnvVars) { %>
import os
<% } %>
<% if (!useCreateThreadAndProcessRun) { %>
import time
<% } %>
from azure.ai.projects import AIProjectClient
from azure.identity import DefaultAzureCredential
from azure.ai.agents.models import <% if (useCreateThreadAndRun || useCreateThreadAndProcessRun) { %> AgentThreadCreationOptions, ThreadMessageOptions,<% } %> ListSortOrder

<%= python.valueOrEnvironment(useEnvVars, "endpoint", "PROJECT_ENDPOINT", endpoint) %>
<%= python.valueOrEnvironment(useEnvVars, "model", "MODEL_DEPLOYMENT_NAME", model) %>

project_client = AIProjectClient(
    endpoint=endpoint,
    credential=DefaultAzureCredential(),
)

with project_client:
    agents_client = project_client.agents

    # [START create_agent]
    agent = agents_client.create_agent(
        model=model,
        name="my-agent",
        instructions="You are helpful agent",
    )
    # [END create_agent]
    print(f"Created agent, agent ID: {agent.id}")

    <% if (useCreateThreadAndRun) { %>
    # [START create_thread_and_run]
    # Prepare the initial user message
    initial_message = ThreadMessageOptions(role="user", content="Hello! Can you tell me a joke?")

    # Create a new thread and immediately start a run on it
    run = agents_client.create_thread_and_run(
        agent_id=agent.id,
        thread=AgentThreadCreationOptions(messages=[initial_message]),
    )
    # [END create_thread_and_run]
    <% } else if (useCreateThreadAndProcessRun) { %>
    # [START create_thread_and_process_run]
    run = agents_client.create_thread_and_process_run(
        agent_id=agent.id,
        thread=AgentThreadCreationOptions(
            messages=[ThreadMessageOptions(role="user", content="Hi! Tell me your favorite programming joke.")]
        ),
    )
    # [END create_thread_and_process_run]
    print(f"Run completed with status: {run.status!r}")
    <% } else { %>
   # [START create_thread]
    thread = agents_client.threads.create()
    # [END create_thread]
    print(f"Created thread, thread ID: {thread.id}")

    # List all threads for the agent
    # [START list_threads]
    threads = agents_client.threads.list()
    # [END list_threads]

    # [START create_message]
    message = agents_client.messages.create(thread_id=thread.id, role="user", content="Hello, tell me a joke")
    # [END create_message]
    print(f"Created message, message ID: {message.id}")

    # [START create_run]
    run = agents_client.runs.create(thread_id=thread.id, agent_id=agent.id)
    <% } %>

    <% if (!useCreateThreadAndProcessRun) { %>
    # Poll the run as long as run status is queued or in progress
    while run.status in ["queued", "in_progress", "requires_action"]:
        # Wait for a second
        time.sleep(1)
        run = agents_client.runs.get(thread_id=thread.id, run_id=run.id)
        # [END create_run]
        print(f"Run status: {run.status}")
    <% } %>
    if run.status == "failed":
        print(f"Run error: {run.last_error}")

    # [START list_messages]
    messages = agents_client.messages.list(thread_id=thread.id, order=ListSortOrder.ASCENDING)
    for msg in messages:
        if msg.text_messages:
            last_text = msg.text_messages[-1]
            print(f"{msg.role}: {last_text.text.value}")
    # [END list_messages]

    agents_client.delete_agent(agent.id)
    print("Deleted agent")