import com.openai.client.OpenAIClientAsync;
import com.openai.client.okhttp.OpenAIOkHttpClientAsync;
import com.openai.models.images.ImageGenerateParams;
import com.openai.models.images.ImageModel;

<% if (useTokenCredentials) { %>import com.azure.identity.AuthenticationUtil;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.openai.credential.BearerTokenCredential; <% 
} else { %>import com.openai.azure.credential.AzureApiKeyCredential; 
<% } %>

public class Sample {
    public static void main(String[] args) {

        <%= java.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint)%>
        <%if (!useTokenCredentials) { %>
        <%= java.valueOrEnvironment(useEnvVars, "azureOpenaiKey", "AZURE_OPENAI_API_KEY", apiKey)%>
        <%}%>
        <%= java.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName)%>

        OpenAIOkHttpClientAsync.Builder clientBuilder = OpenAIOkHttpClientAsync.builder();
        <% if (!useTokenCredentials) { %>
        clientBuilder
                .baseUrl(endpoint)
                .credential(AzureApiKeyCredential.create(azureOpenaiKey));        
        <% 
        } else { %>
        clientBuilder
                .baseUrl(endpoint)
                .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(
                        new DefaultAzureCredentialBuilder().build(), "https://cognitiveservices.azure.com/.default")));
        <%} %>
        OpenAIClientAsync client = clientBuilder.build();

        // Example usage of the client to generate images
        String prompt = "Golder Retriever dog smiling when running on flower field";
        int numberOfImages = 1;

        ImageGenerateParams params = ImageGenerateParams.builder()
            .prompt(prompt)
            .model(ImageModel.of(deploymentName))
            .n(numberOfImages)
            .quality(ImageGenerateParams.Quality.HD)
            .build();

        // Call the image generation API with the specified parameters
        client.images()
            .generate(params)
            .thenAccept(imagesResponse -> imagesResponse.data().ifPresent(list -> list.forEach(image -> System.out.println("Generated Image URL: " + image.url()))))
            .join();
    }
}