package main

<%= go.includes(
	"context",
	"encoding/base64",
	"os",
	{ module: "github.com/Azure/azure-sdk-for-go/sdk/azidentity", condition: useTokenCredentials },
	"github.com/openai/openai-go/v2",
	{ module: "github.com/openai/openai-go/v2/azure", condition: useTokenCredentials },
	"github.com/openai/openai-go/v2/option",
) %>

func main() {
	<%= go.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
	<%=	go.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>
	<%	if (useTokenCredentials) { %>
	<% } else { %>
	<%= go.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
	<% } %>

	<% if (endpointSuffix) { %>
	endpoint = endpoint + "<%= endpointSuffix %>"
	<% } %>
	<% if (useTokenCredentials) { %>
	token_credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		panic(err)
	}
	client := openai.NewClient(
		option.WithBaseURL(endpoint),
		azure.WithTokenCredential(token_credential),
	)
	<% } else { %>
		client := openai.NewClient(
		option.WithBaseURL(endpoint),
		option.WithAPIKey(apiKey),
		)
	<% } %>
	
	// Generate an image
	image, err := client.Images.Generate(context.Background(), openai.ImageGenerateParams{
		Prompt:         "A cute baby polar bear",
		Model:          deploymentName,
		<% if (deploymentName == "dall-e-3" || deploymentName == "dall-e-2") { %>
		ResponseFormat: openai.ImageGenerateParamsResponseFormatB64JSON,
		<% } %>
		N:              openai.Int(1),
	})
	if err != nil {
		panic(err)
	}

	// Save the image to a file
	imageBytes, err := base64.StdEncoding.DecodeString(image.Data[0].B64JSON)
	if err != nil {
		panic(err)
	}

	dest := "./output.png"
	println("Writing image to " + dest)
	err = os.WriteFile(dest, imageBytes, 0755)
	if err != nil {
		panic(err)
	}
}
