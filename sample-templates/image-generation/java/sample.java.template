import com.openai.client.OpenAIClient;
import com.openai.client.okhttp.OpenAIOkHttpClient;
import com.openai.models.images.ImageGenerateParams;
import com.openai.models.images.ImageModel;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;

<% if (useTokenCredentials) { %>import com.azure.identity.AuthenticationUtil;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.openai.credential.BearerTokenCredential; <% 
} else { %>import com.openai.azure.credential.AzureApiKeyCredential; 
<% } %>


public class Sample {
    public static void main(String[] args) {

    <%= java.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint)%>
    <%= java.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName)%>
    <%if (!useTokenCredentials) { %>
    <%= java.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey)%>
    <%}%>

        <% if (endpointSuffix) { %>
        endpoint = endpoint + "<%= endpointSuffix %>";
        <% } %>
        <% if (!useTokenCredentials) { %>
        OpenAIClient client = OpenAIOkHttpClient.builder()
                .baseUrl(endpoint)
                .credential(AzureApiKeyCredential.create(apiKey))
                .build();
        <% 
        } else { %>
         OpenAIClient client = OpenAIOkHttpClient.builder()
                .baseUrl(endpoint)
                // Set the Azure Entra ID
                .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(
                        new DefaultAzureCredentialBuilder().build(), "https://cognitiveservices.azure.com/.default")))
                .build();
        <%} %>

        ImageGenerateParams imageGenerateParams = ImageGenerateParams.builder()
                <% if (deploymentName == "dall-e-3" || deploymentName == "dall-e-2") { %>
                .responseFormat(ImageGenerateParams.ResponseFormat.B64_JSON)
                <% } %>
                .prompt("A cute baby polar bear")
                .model(deploymentName)
                .n(1)
                .build();

        client.images().generate(imageGenerateParams).data().orElseThrow().forEach(image -> {
                try {   
                        String base64String = image.b64Json().orElseThrow();
                        byte[] imageData = Base64.getDecoder().decode(base64String);
                        Files.write(Paths.get("output.png"), imageData);
                } catch (IOException e) {
                        e.printStackTrace();
                }
        });
    }
}