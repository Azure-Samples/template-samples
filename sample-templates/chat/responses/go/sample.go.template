package main

<%= go.includes(
	"context",

	{ module: "github.com/Azure/azure-sdk-for-go/sdk/azidentity", condition: useTokenCredentials },
	{ module: "github.com/openai/openai-go/v3/azure", condition: useTokenCredentials },
	"github.com/openai/openai-go/v3",
	"github.com/openai/openai-go/v3/option",
	"github.com/openai/openai-go/v3/responses",
) %>

func main() {
	<%= go.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
	<%	if (useTokenCredentials) { %>
	<% } else { %>
	<%= go.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
	<% } %>
	<%=	go.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT", deploymentName) %>

	<% if (endpointSuffix) { %>
	endpoint = endpoint + "<%= endpointSuffix %>"
	<% } %>
	<% if (useTokenCredentials) { %>
	token_credential, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		println("Error creating credential.")
		panic(err)
	}

	client := openai.NewClient(
		option.WithBaseURL(endpoint),
		azure.WithTokenCredential(token_credential),
	)
	<% } else { %>
		client := openai.NewClient(
		option.WithBaseURL(endpoint),
		option.WithAPIKey(apiKey),
		)
	<% } %>
	ctx := context.Background()

	question := "Write me a haiku about computers"

	resp, err := client.Responses.New(ctx, responses.ResponseNewParams{
		Input: responses.ResponseNewParamsInputUnion{OfString: openai.String(question)},
		Model: deploymentName,
	})

	if err != nil {
		panic(err)
	}

	println(resp.OutputText())
}
