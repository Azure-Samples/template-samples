<% if (useTokenCredentials) { %>
using Azure.Identity; 
<% } %>
using OpenAI;
using OpenAI.Responses;
<% if (useTokenCredentials) { %>
using System.ClientModel.Primitives;
<% } else { %>
using System.ClientModel;
<% } %>

#pragma warning disable OPENAI001

<%= csharp.valueOrEnvironment(useEnvVars, "deploymentName", "AZURE_OPENAI_DEPLOYMENT_NAME", deploymentName) %>
<%= csharp.valueOrEnvironment(useEnvVars, "endpoint", "AZURE_OPENAI_ENDPOINT", endpoint) %>
<%if (useTokenCredentials) { %>
<% } else { %>
<%= csharp.valueOrEnvironment(useEnvVars, "apiKey", "AZURE_OPENAI_API_KEY", apiKey) %>
<% } %>

<% if (useTokenCredentials) { %>
BearerTokenPolicy tokenPolicy = new(
    new DefaultAzureCredential(),
    "https://cognitiveservices.azure.com/.default");

<% } else { %> 
OpenAIResponseClient client = new(
    model: deploymentName,
    apiKey: apiKey); 
<% } %>

<% if (extraParams) { %>
ResponseCreationOptions options = new ResponseCreationOptions{
    <% if (extraParams.Temperature) { %>
    Temperature=(float)<%= extraParams.Temperature %>,
    <% } %>
<% if (extraParams.possibleOptions) { %>
return new ResponseCreationOptions(
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                temperature,
                topP,
                endUserId,
                serviceTier,
                previousResponseId,
                model,
                reasoningOptions,
                backgroundModeEnabled,
                maxOutputTokenCount,
                instructions,
                textOptions,
                tools ?? new ChangeTrackingList<ResponseTool>(),
                toolChoice,
                truncationMode,
                input,
                include ?? new ChangeTrackingList<InternalIncludable>(),
                parallelToolCallsEnabled,
                storedOutputEnabled,
                stream,
                additionalBinaryDataProperties);
<% } %>
};
<% } %>

OpenAIResponse response = client.CreateResponse(
     [
        ResponseItem.CreateUserMessageItem("What's the weather like today for my current location?"),
     ]<% if (extraParams) { %>, options<% } %>);

Console.WriteLine($"[ASSISTANT]: {response.GetOutputText()}");
