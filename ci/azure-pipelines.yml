trigger:
  branches:
    include:
    - main
  paths:
    include:
    - generated-samples/**
    - packages/sdk-samples-api/**

pr:
  branches:
    include:
      - "*"

pool:
  vmImage: 'ubuntu-latest'

parameters:
  # this parameter allows selecting different input data files for generating samples,
  # selection happens as a dropdown in the ADO UI
  - name: templateConfigInput
    displayName: 'Template Configuration Input File'
    type: string
    default: 'input-data.yaml'
    values:
      - 'input-data.yaml'
      - 'service-setup.yaml'
      - 'test-data.yaml'

variables:
  - name: dotnetVersion
    value: '9.x'
  - name: TEMPLATE_CONFIG_INPUT
    value: ${{ parameters.templateConfigInput }}

stages:
- stage: ValidateSamples
  displayName: 'Generate and Validate Code Samples'
  jobs:

  - job: GenerateSamples
    displayName: 'Generate Code Samples'
    steps:
    - checkout: self
    - script: |
        npm install -g @caleuche/cli
      displayName: 'Install Caleuche CLI'
    - script: |
        echo "Generating samples with input: $(TEMPLATE_CONFIG_INPUT)"
        # Generate samples using che batch command
        che batch samples/$(TEMPLATE_CONFIG_INPUT)
      displayName: 'Generate samples'

    - publish: generated-samples/
      artifact: GeneratedSamples
      displayName: 'Publish generated samples'

    - task: AzureCLI@2
      displayName: 'Get Azure OpenAI credentials'
      inputs:
        azureSubscription: $(ARM_SERVICE_CONNECTION_NAME)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get endpoint from Azure OpenAI resource
          ENDPOINT=$(az cognitiveservices account show \
            --name $(AZURE_OPENAI_SERVICE) \
            --resource-group $(RESOURCE_GROUP) \
            --query "properties.endpoint" -o tsv)
          
          # Get API key from Azure OpenAI resource
          API_KEY=$(az cognitiveservices account keys list \
            --name $(AZURE_OPENAI_SERVICE) \
            --resource-group $(RESOURCE_GROUP) \
            --query "key1" -o tsv)

          # Get predefined deployment if available
          DEPLOYMENT=$(AZURE_OPENAI_DEPLOYMENT)

          # Set as pipeline variables for use in subsequent jobs
          echo "##vso[task.setvariable variable=AZURE_OPENAI_ENDPOINT;isOutput=true]$ENDPOINT"
          echo "##vso[task.setvariable variable=AZURE_OPENAI_API_KEY;isOutput=true]$API_KEY"
          echo "##vso[task.setvariable variable=AZURE_OPENAI_DEPLOYMENT;isOutput=true]$DEPLOYMENT"
      name: 'configureCredentials'

  - job: PublishConfigs
    displayName: 'Publish build configurations for samples'
    dependsOn: GenerateSamples
    steps:
    - script: |
        # Publish configs to generated directories
        chmod +x scripts/publish-configs.sh
        ./scripts/publish-configs.sh
      displayName: 'Publish configurations'
    
    # Publish the generated config files as artifacts so we can access them in validation jobs
    - publish: generated-samples/
      artifact: GeneratedConfigs
      displayName: 'Publish generated configurations'

  - job: DetectChanges
    displayName: 'Detect Changed Samples'
    dependsOn: GenerateSamples
    steps:
    - checkout: self
      fetchDepth: 0
    - download: current
      artifact: GeneratedSamples
      displayName: 'Download generated samples'

    - script: |
        mkdir -p ./generated-samples/
        cp -r "$(Pipeline.Workspace)/GeneratedSamples/"* ./generated-samples/
        echo "Copied downloaded samples to ./generated-samples/"
      displayName: 'Copy sample artifacts to workspace'

    - script: |
        # Ensure we have the main branch reference
        git fetch origin main:main || git fetch origin main
        
        # Get changed sample directories (compare working tree to main, not HEAD to main)
        (git diff --name-only main; git ls-files --others --exclude-standard) | grep "^generated-samples/" | xargs -n1 dirname | sort | uniq > changed_samples.txt || touch changed_samples.txt
        echo "Changed sample directories:"
        cat changed_samples.txt

        # Split by language
        grep "/csharp/" changed_samples.txt > changed_csharp.txt || touch changed_csharp.txt
        grep "/python/" changed_samples.txt > changed_python.txt || touch changed_python.txt
        grep "/java/" changed_samples.txt > changed_java.txt || touch changed_java.txt
        grep "/go/" changed_samples.txt > changed_go.txt || touch changed_go.txt
        grep "/javascript/" changed_samples.txt > changed_javascript.txt || touch changed_javascript.txt

        echo "Changed C# samples:"
        cat changed_csharp.txt
        echo "Changed Python samples:"
        cat changed_python.txt
        echo "Changed Java samples:"
        cat changed_java.txt
        echo "Changed Go samples:"
        cat changed_go.txt
        echo "Changed Javascript samples:"
        cat changed_javascript.txt

        # Set variables for conditional jobs
        echo "##vso[task.setvariable variable=hasCSharpChanges;isOutput=true]$([ -s changed_csharp.txt ] && echo 'true' || echo 'false')"
        echo "##vso[task.setvariable variable=hasPythonChanges;isOutput=true]$([ -s changed_python.txt ] && echo 'true' || echo 'false')"
        echo "##vso[task.setvariable variable=hasJavaChanges;isOutput=true]$([ -s changed_java.txt ] && echo 'true' || echo 'false')"
        echo "##vso[task.setvariable variable=hasGoChanges;isOutput=true]$([ -s changed_go.txt ] && echo 'true' || echo 'false')"
        echo "##vso[task.setvariable variable=hasJavascriptChanges;isOutput=true]$([ -s changed_javascript.txt ] && echo 'true' || echo 'false')"

      displayName: 'Detect changes'
      name: 'detectChanges'
      
    - publish: changed_csharp.txt
      artifact: ChangedCSharp
      displayName: 'Publish C# changes'
      
    - publish: changed_python.txt
      artifact: ChangedPython
      displayName: 'Publish Python changes'

    - publish: changed_java.txt
      artifact: ChangedJava
      displayName: 'Publish Java changes'

    - publish: changed_go.txt
      artifact: ChangedGo
      displayName: 'Publish Go changes'

    - publish: changed_javascript.txt
      artifact: ChangedJavascript
      displayName: 'Publish Javascript changes'

  - job: ValidateCSharp
    displayName: 'Validate C# Samples'
    dependsOn: 
    - DetectChanges
    - PublishConfigs
    - GenerateSamples
    condition: eq(dependencies.DetectChanges.outputs['detectChanges.hasCSharpChanges'], 'true')
    variables:
      # Map the output variables from GenerateSamples job
      azureOpenAIEndpoint: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_ENDPOINT'] ]
      azureOpenAIApiKey: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_API_KEY'] ]
      azureOpenAIDeployment: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_DEPLOYMENT'] ]
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        version: $(dotnetVersion)

    - download: current
      artifact: ChangedCSharp
      displayName: 'Download list of changed C# samples'

    - download: current
      artifact: GeneratedSamples
      displayName: 'Download generated samples'

    - script: |
        mkdir -p ./generated-samples/
        cp -r "$(Pipeline.Workspace)/GeneratedSamples/"* ./generated-samples/
        echo "Copied downloaded samples to ./generated-samples/"
      displayName: 'Copy sample artifacts to workspace'

    - download: current
      artifact: GeneratedConfigs
      displayName: 'Download generated configurations'

    - script: |
        cp -r "$(Pipeline.Workspace)/GeneratedConfigs/"* ./generated-samples/
      displayName: 'Copy generated configurations to workspace'

    - script: |
        chmod +x scripts/*.sh
        # Set environment variables for validation using the mapped variables
        export AZURE_OPENAI_ENDPOINT=$(azureOpenAIEndpoint)
        export AZURE_OPENAI_API_KEY=$(azureOpenAIApiKey)
        export AZURE_OPENAI_DEPLOYMENT=$(azureOpenAIDeployment)
        ./scripts/validate-samples.sh csharp "$(Pipeline.Workspace)/ChangedCSharp/changed_csharp.txt" $(VALIDATE_WITH_SERVICE)

      displayName: 'Validate C# samples'

    - script: |
        mkdir -p validation-results
        cp validation-*.log validation-results/ 2>/dev/null || echo "No validation log files found"
      displayName: 'Collect validation logs'
      condition: always()

    - publish: validation-results/
      artifact: CSharpResults
      condition: always()

      # publish the validated samples to an Azure Artifacts feed
    - task: UniversalPackages@0
      displayName: 'Publish Csharp samples to feed'
      inputs:
        command: publish
        publishDirectory: './generated-samples/csharp'
        feedsToUse: 'internal'
        vstsFeedPublish: '$(Project)/$(samples-feed)'
        vstsFeedPackagePublish: 'csharp-samples'
        versionOption: 'patch'

  - job: ValidatePython
    displayName: 'Validate Python Samples'
    dependsOn: 
    - DetectChanges
    - PublishConfigs
    - GenerateSamples
    condition: eq(dependencies.DetectChanges.outputs['detectChanges.hasPythonChanges'], 'true')
    variables:
      # Map the output variables from GenerateSamples job
      azureOpenAIEndpoint: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_ENDPOINT'] ]
      azureOpenAIApiKey: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_API_KEY'] ]
      azureOpenAIDeployment: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_DEPLOYMENT'] ]
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'

    - download: current
      artifact: ChangedPython
      displayName: 'Download list of changed Python samples'

    - download: current
      artifact: GeneratedSamples
      displayName: 'Download generated samples'

    - script: |
        mkdir -p ./generated-samples/
        cp -r "$(Pipeline.Workspace)/GeneratedSamples/"* ./generated-samples/
        echo "Copied downloaded samples to ./generated-samples/"
      displayName: 'Copy sample artifacts to workspace'

    - download: current
      artifact: GeneratedConfigs
      displayName: 'Download generated configurations'

    - script: |
        cp -r "$(Pipeline.Workspace)/GeneratedConfigs/"* ./generated-samples/
      displayName: 'Copy generated configurations to workspace'

    - script: |
        chmod +x scripts/*.sh
        # Set environment variables for validation using the mapped variables
        export AZURE_OPENAI_ENDPOINT=$(azureOpenAIEndpoint)
        export AZURE_OPENAI_API_KEY=$(azureOpenAIApiKey)
        export AZURE_OPENAI_DEPLOYMENT=$(azureOpenAIDeployment)
        ./scripts/validate-samples.sh python "$(Pipeline.Workspace)/ChangedPython/changed_python.txt" $(VALIDATE_WITH_SERVICE)

      displayName: 'Validate Python samples'

    - script: |
        mkdir -p validation-results
        cp validation-*.log validation-results/ 2>/dev/null || echo "No validation log files found"
      displayName: 'Collect validation logs'
      condition: always()

    - publish: validation-results/
      artifact: PythonResults
      condition: always()

    - task: UniversalPackages@0
      displayName: 'Publish Python samples to feed'
      # Only publish if all samples were successfully validated
      condition: succeeded()
      inputs:
        command: publish
        publishDirectory: './generated-samples/python'
        feedsToUse: 'internal'
        vstsFeedPublish: '$(Project)/$(samples-feed)'
        vstsFeedPackagePublish: 'python-samples'
        versionOption: 'patch'

  - job: ValidateJava
    displayName: 'Validate Java Samples'
    dependsOn: 
    - DetectChanges
    - PublishConfigs
    - GenerateSamples
    condition: eq(dependencies.DetectChanges.outputs['detectChanges.hasJavaChanges'], 'true')
    variables:
      # Map the output variables from GenerateSamples job
      azureOpenAIEndpoint: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_ENDPOINT'] ]
      azureOpenAIApiKey: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_API_KEY'] ]
      azureOpenAIDeployment: $[ dependencies.GenerateSamples.outputs['configureCredentials.AZURE_OPENAI_DEPLOYMENT'] ]

    steps:
    - checkout: self
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - download: current
      artifact: ChangedJava
      displayName: 'Download list of changed Java samples'

    - download: current
      artifact: GeneratedSamples
      displayName: 'Download generated samples'

    - script: |
        mkdir -p ./generated-samples/
        cp -r "$(Pipeline.Workspace)/GeneratedSamples/"* ./generated-samples/
        echo "Copied downloaded samples to ./generated-samples/"
      displayName: 'Copy sample artifacts to workspace'

    - download: current
      artifact: GeneratedConfigs
      displayName: 'Download generated configurations'

    - script: |
        cp -r "$(Pipeline.Workspace)/GeneratedConfigs/"* ./generated-samples/
      displayName: 'Copy generated configurations to workspace'

    - script: |
        chmod +x scripts/*.sh
        # Set environment variables for validation using the mapped variables
        export AZURE_OPENAI_ENDPOINT=$(azureOpenAIEndpoint)
        export AZURE_OPENAI_API_KEY=$(azureOpenAIApiKey)
        export AZURE_OPENAI_DEPLOYMENT=$(azureOpenAIDeployment)
        ./scripts/validate-samples.sh java "$(Pipeline.Workspace)/ChangedJava/changed_java.txt" $(VALIDATE_WITH_SERVICE)

      displayName: 'Validate Java samples'

    - script: |
        mkdir -p validation-results
        cp validation-*.log validation-results/ 2>/dev/null || echo "No validation log files found"
      displayName: 'Collect validation logs'
      condition: always()

    - publish: validation-results/
      artifact: JavaResults
      condition: always()

  - job: PublishSampleLibrary
    displayName: 'Publish Sample Library npm package'
    dependsOn: 
    - ValidateCSharp
    - ValidatePython
    steps:
    - checkout: self
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.x'
    
    - download: current
      artifact: GeneratedSamples
      displayName: 'Download generated samples'

    - script: |
        mkdir -p ./generated-samples/
        cp -r "$(Pipeline.Workspace)/GeneratedSamples/"* ./generated-samples/
        echo "Copied downloaded samples to ./generated-samples/"
      displayName: 'Copy sample artifacts to workspace'

    - script: |
        # Copy generated samples into the npm package
        mkdir -p packages/sdk-samples-api/samples
        cp -r ./generated-samples/* packages/sdk-samples-api/samples/
        echo "Copied samples into npm package directory"
      displayName: 'Include samples in package'

    - script: |
        cd packages/sdk-samples-api
        
        # Compose a version string using the base version and the build ID
        BASE_VERSION=$(node -p "require('./package.json').version" | cut -d- -f1)
        NEW_VERSION=${BASE_VERSION}-ci.$(Build.BuildId)
        echo "Setting version to $NEW_VERSION"
        npm version --no-git-tag-version $NEW_VERSION
      displayName: 'Generate unique package version'

    - script: |
        cd packages/sdk-samples-api
        npm install
        npm run build
      displayName: 'Build sample library package'

    - task: Npm@1
      displayName: 'Publish @azure-foundry/sample-library to Azure Artifacts'
      inputs:
        command: 'publish'
        workingDir: './packages/sdk-samples-api'
        publishRegistry: 'useFeed'
        publishFeed: '$(Project)/$(samples-feed)'

